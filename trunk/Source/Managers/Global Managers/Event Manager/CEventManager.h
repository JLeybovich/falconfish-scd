////////////////////////////////////////////////////////////////////////////////
//	File			:	EventManager.h
//	Date			:	3/29/11
//	Mod. Date		:	3/31/11
//	Mod. Initials	:	MR
//	Author			:	Mac Reichelt
//	Purpose			:	Handles events sent between components for the entire
//						game.
////////////////////////////////////////////////////////////////////////////////

#ifndef _CEVENTMANAGER_H_
#define _CEVENTMANAGER_H_

#include <string>
#include <map>
#include <set>
using namespace std;

#include "../Memory Manager/CEventAllocator.h"

class IEvent;
class IComponent;
typedef unsigned int EventID;

enum EEventPriority{PRIORITY_IMMEDIATE, PRIORITY_NORMAL, PRIORITY_INPUT, PRIORITY_UPDATE, PRIORITY_RENDER, PRIORITY_SHUTDOWN};

class CEventManager
{
	struct TListener
	{
		IComponent* m_pcListener;
		void (*m_pfCallback)(IEvent*, IComponent*);
	};

typedef multimap<EventID, TListener*, less<EventID>, 
CEventAllocator<pair<EventID, TListener*>>> EventMap;

typedef multimap<EventID, TListener*, less<EventID>, 
CEventAllocator<pair<EventID, TListener*>>>::iterator EventIter;

	EventMap	m_cListeners;

	set<IEvent*, less<IEvent*>, CEventAllocator<IEvent*> > m_cEventList;

	/////////////////
	// Constructor //
	/////////////////
	CEventManager();

	/////////////////////
	// Trilogy of Evil //
	/////////////////////
	~CEventManager();
	CEventManager(const CEventManager&);
	CEventManager& operator=(const CEventManager&);

public:
////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	static CEventManager* GetInstance();

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	EventID RegisterEvent(string szEventName, IComponent* pcListener, 
		void(*pfCallback)(IEvent*, IComponent*)); // callback(Comp* sender, iEvent);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void RegisterEvent(EventID nEventID);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	bool AlreadyRegistered(EventID nEventID, IComponent* pcListener);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void UnregisterEvent(EventID nEventID, IComponent* pcListener);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void UnregisterEventAll(IComponent* pcListener);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void PostEvent(IEvent* pcEvent, unsigned int nPriority);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void ProcessEvents();

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void ClearEvents();

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void Shutdown();
};

#endif