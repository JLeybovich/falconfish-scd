#ifndef _ENUMS_H_
#define _ENUMS_H_

#define NULL 0
#include "Wwise/Wwise_IDs.h"

//type enum for the shape of the bounding volume of an object
enum EBVSHAPE {BSPHERE = 1, BAABB = 2, BOBB = 3, BLINE = 4, BPLANE = 5, BFRUSTUM = 6};
//type enum for the object holding the collideable component
enum EOBJTYPE {OBJPLAYER = 1, OBJGITEM = 2,
OBJPITEM = 3, OBJWALL = 4, OBJSHELF = 5, OBJENDCAP = 6,
OBJCHECKOUT = 7, OBJCAMERA = 8, OBJFRUSTUM = 9};



enum EHeldItemType { NO_HELD_ITEM = -1, TURKEY, BANANA, PEANUT_BUTTER, PIE, 
							ENERGY_DRINK, SOUP, DONUT, JAM, MAX_HELD_ITEMS };

enum EHeapID{HEAPID_GENERAL, HEAPID_EVENT, HEAPID_RENDER};

enum EEventPriority{PRIORITY_IMMEDIATE, PRIORITY_NORMAL, PRIORITY_INPUT, 
					PRIORITY_UPDATE, PRIORITY_RENDER, PRIORITY_SHUTDOWN};

enum EObjectID{ GLOBAL_ID = 1, BIKER_ID = 10, SASHA_ID, LERP_ID, CART_ID, BANANA_ID,
				TURKEY_ID, ITEM_ID, PEANUT_BUTTER_ID, CREAM_PIE_ID, DOUGHNUT_ID,
				JAM_ID, MAX_ID};

enum EDepartment { NO_DEPARTMENT = -1, DAIRY, DRY_GOODS, CANNED_GOODS, MEATS, 
				PRODUCE, BAKERY, DELI, FREEZER, MAX_DEPARTMENTS, SNACKS };

enum EGoalItemType { NO_ITEM = -1, GORILLA_MILK, CAPTAIN_FLAKEY, 
					KILLER_TOMATO_SOUP, BAKON, SAD_APPLE, FRENCHY_BREAD, 
					SAMMY_SANDWICH, TV_DINNER, MAX_ITEMS, AGENT_ORANGE};

// Game States
// NOTE:	When adding or removing a state, verify with lua that
//				the numbers are still corresponding to the actual enums
//				(E.G. Objects associated with 1, the MAIN_MENU_STATE will
//				not be correct if something is added before MAIN_MENU_STATE
//				in this enum declaration since MAIN_MENU_STATE will be 2 at
//				that point.)
//			The safe way to add values is to add them to the end of the list, 
//				before MAX_STATE. That way, a check is unnecessary.
//				(Also, label in comments the state name at any location you use a 
//				hard number instead of the enum name, i.e. in lua, to assist
//				in any future changes)
//											- Smith
enum EGameState {MIN_STATE = -1,
				 INTRO_STATE,
				 MAIN_MENU_STATE,
				 GAMEPLAY_STATE,
				 PAUSE_STATE,
				 WIN_STATE,
				 LOSE_STATE,
				 CONSOLE_STATE,
				 GAME_MODE_SELECT_STATE,
				 CHARACTER_SELECT_STATE,
				 OPTIONS_STATE,
				 CREDITS_STATE,
				 KEYBIND_STATE,
				 HOW_TO_PLAY_STATE,
				 MAX_STATE};


///////////////////////////////////////////////
// Render Function Enums
///////////////////////////////////////////////
enum ERenderFunc { RF_MIN = -1, RF_VERT, RF_INDEXED_VERT, RF_INDEXED_VERT_TEX2, RF_MAX };


enum SoundID{ MENU_SELECT = AK::EVENTS::PLAY_SFX_MENU_SELECT, 
	MENU_INVALID_SELECTION	=	AK::EVENTS::PLAY_SFX_MENU_CANCEL,
	MENU_SCROLL				=	AK::EVENTS::PLAY_SFX_MENU_SCROLL, 
	MENU_SCISSOR			=	AK::EVENTS::PLAY_SFX_MAIN_MENU_SCISSOR, 
	MENU_MUSIC_PLAY			=	AK::EVENTS::PLAY_MX_MENU, 
	MENU_MUSIC_STOP			=	AK::EVENTS::STOP_MX_MENU, 

	GAMEPLAY_MUSIC_PLAY		=	AK::EVENTS::PLAY_MX_GAMEPLAY, 
	GAMEPLAY_MUSIC_PAUSE	=	AK::EVENTS::PAUSE_MX_GAMEPLAY,
	GAMEPLAY_MUSIC_RESUME	=	AK::EVENTS::RESUME_MX_GAMEPLAY, 
	GAMEPLAY_MUSIC_STOP		=	AK::EVENTS::STOP_MX_GAMEPLAY, 
	GAMEPLAY_WIN			=	AK::EVENTS::PLAY_SFX_GAMEPLAY_WIN, 
	GAMEPLAY_LOSE			=	AK::EVENTS::PLAY_SFX_GAMEPLAY_LOSE, 
	START_COUNTDOWN			=	AK::EVENTS::PLAY_DX_GAMEPLAY_STARTRACECOUNTDOWN,   

	ITEM_DROP				=	AK::EVENTS::PLAY_FX_3D_DOOR_CLOSE, 
	ITEM_SPAWN				=	AK::EVENTS::PLAY_FX_3D_BODYFALL,
	ITEM_PICK_UP			=	AK::EVENTS::PLAY_SFX_GAMEPLAY_ITEMCOLLISON, 
	ITEM_COLLISION			=	AK::EVENTS::PLAY_SFX_GAMEPLAY_ITEMCOLLISON, 

	TURKEY_USE				=	AK::EVENTS::PLAY_SFX_ITEM_TURKEY_USE, 
	TURKEY_TRAVEL			=	AK::EVENTS::PLAY_SFX_ITEM_TURKEY_TRAVEL, 
	TURKEY_TRAVEL_STOP		=	AK::EVENTS::STOP_SFX_ITEM_TURKEY_TRAVEL, 
	TURKEY_IMPACT			=	AK::EVENTS::PLAY_SFX_ITEM_TURKEY_IMPACT,

	BULLDOG_CART_BRAKE		=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_CART_BRAKE, 
	BULLDOG_CART_BOOST		=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_CART_BOOST, 
	BULLDOG_SPEED_STOP		=	AK::EVENTS::STOP_SFX_CHARACTERS_BULLDOGMA_SPEED, 
	BULLDOG_HURT			=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_HURT, 
	BULLDOG_COLLECTION		=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_COLLECTION, 
	BULLDOG_ITEM_USE		=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_ITEMUSE, 
	BULLDOG_BIKE_START		=	AK::EVENTS::PLAY_SFX_CART_BIKE_START, 
	BULLDOG_SHOVE			=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_SHOVE, 
	BULLDOG_VICTORY			=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_VICTORY, 
	BULLDOG_BIKE_START_FAIL	=	AK::EVENTS::PLAY_SFX_CART_BIKE_START_FAIL, 
	BULLDOG_SPEED_PLAY		=	AK::EVENTS::PLAY_SFX_CHARACTERS_BULLDOGMA_SPEED, 
	BULLDOG_BIKE_SLIP		=	AK::EVENTS::PLAY_SFX_CART_BIKE_SLIP,

	CART_COLLECTION			=	AK::EVENTS::PLAY_SFX_CART_COLLECTION, 
	CART_WALL_COLLISION		=	AK::EVENTS::PLAY_SFX_IMPACT_CART_WALL, 
	CART_PLAYER_COLLISION	=	AK::EVENTS::PLAY_SFX_IMPACT_CART_ENEMY,
	CART_COLLISION			=	AK::EVENTS::PLAY_SFX_IMPACT_CART_WALL,

	MAX_SOUNDS };
#endif // _ENUMS_H_